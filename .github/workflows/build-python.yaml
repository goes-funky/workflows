name: Build Python
"on":
  workflow_call:
    inputs:
      python-version:
        type: string
        description: Python version
        default: "3.9"
      ubuntu-version:
        type: string
        description: Ubuntu version
        default: latest
      poetry-version:
        type: string
        description: Poetry version
        default: 1.1.12
      setuptools-version:
        type: string
        description: Force poetry setuptools version
        default: ""
        required: false
      skip-lint:
        type: boolean
        description: Whether to skip code linting with flake8
        default: false
      skip-isort:
        type: boolean
        description: Whether to skip code linting with isort
        default: true
      skip-format:
        type: boolean
        description: Whether to skip code formatting
        default: false
      skip-tests:
        type: boolean
        description: Whether to skip running tests
        default: true
      skip-integration-tests:
        type: boolean
        description: Whether to skip running integration tests
        default: true
      skip-mypy:
        type: boolean
        description: Whether to skip checking type hints with mypy
        default: true
      skip-checkout:
        type: boolean
        description: Whether to skip checkout
        default: false
      project-artifact:
        type: string
        description: Use project from artifact (instead of checking out repo)
        default: ""
      is-repo-public:
        type: boolean
        description: Whether to skip ssh agent configuration
        default: false
      skip-sonar:
        type: boolean
        description: Whether to skip sonarcloud scans
        default: true
      with-submodules:
        type: boolean
        description: Whether to fetch git submodules
        default: false
    secrets:
      gcp-gcr-service-account:
        description: GCP GCR Service Account e-mail
        required: false
      gcp-gcr-workload-identity-provider:
        description: GCP GCR Workload Identity provider
        required: false
      sonar_token:
        description: Token for sonarcloud.io scans
        required: false
      ssh-private-key:
        description: SSH private key used to authenticate to GitHub with, in order to fetch private dependencies
        required: false
      codecov-token:
        description: Keep around until all workflows are migrated
        required: false
jobs:
  pre-job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    timeout-minutes: 15
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
  deps:
    runs-on: ubuntu-${{ inputs.ubuntu-version }}
    name: Dependencies
    needs:
      - pre-job
    if: needs.pre-job.outputs.should_skip != 'true'
    timeout-minutes: 15
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.with-submodules }}
      - name: Download artifact
        if: inputs.project-artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.project-artifact }}
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v3
        with:
          path: .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Configure setup tools for poetry
        if: inputs.setuptools-version
        env:
          SETUPTOOLS_VERSION: ${{ inputs.setuptools-version }}
        run: poetry run pip install "setuptools==$SETUPTOOLS_VERSION"
      - name: Download poetry packages
        run: |-
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          poetry install
  black:
    name: Black
    if: '!inputs.skip-format'
    needs:
      - deps
    runs-on: ubuntu-${{ inputs.ubuntu-version }}
    timeout-minutes: 15
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.with-submodules }}
      - name: Download artifact
        if: inputs.project-artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.project-artifact }}
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v3
        with:
          path: .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Configure setup tools for poetry
        if: inputs.setuptools-version
        env:
          SETUPTOOLS_VERSION: ${{ inputs.setuptools-version }}
        run: poetry run pip install "setuptools==$SETUPTOOLS_VERSION"
      - name: Download poetry packages
        run: |-
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          poetry install
      - name: Ensure code is formatted
        run: poetry run black --check .
  lint:
    name: Lint
    if: '!inputs.skip-lint'
    needs:
      - deps
    runs-on: ubuntu-${{ inputs.ubuntu-version }}
    timeout-minutes: 15
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.with-submodules }}
          fetch-depth: 0
      - name: Download artifact
        if: inputs.project-artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.project-artifact }}
      - name: Scan for Secrets
        uses: trufflesecurity/trufflehog@v3.22.0
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v3
        with:
          path: .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Configure setup tools for poetry
        if: inputs.setuptools-version
        env:
          SETUPTOOLS_VERSION: ${{ inputs.setuptools-version }}
        run: poetry run pip install "setuptools==$SETUPTOOLS_VERSION"
      - name: Download poetry packages
        run: |-
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          poetry install
      - name: Flake8
        run: poetry run flake8
      - name: Isort
        if: '!inputs.skip-isort'
        run: poetry run isort --profile black --check .
  tests:
    name: Tests
    if: '!inputs.skip-tests'
    needs:
      - deps
    runs-on: ubuntu-${{ inputs.ubuntu-version }}
    timeout-minutes: 15
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.with-submodules }}
          fetch-depth: 0
      - name: Download artifact
        if: inputs.project-artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.project-artifact }}
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v3
        with:
          path: .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Configure setup tools for poetry
        if: inputs.setuptools-version
        env:
          SETUPTOOLS_VERSION: ${{ inputs.setuptools-version }}
        run: poetry run pip install "setuptools==$SETUPTOOLS_VERSION"
      - name: Download poetry packages
        run: |-
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          poetry install
      - name: Tests
        run: |-
          poetry run coverage run -m pytest
          poetry run coverage xml
          sed -i "s/<source>.*<\/source>/<source>\/github\/workspace<\/source>/g" coverage.xml
      - name: Sonarcloud check Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: '!inputs.skip-sonar && github.event_name != ''pull_request'''
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: |-
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}
            -Dsonar.organization=${{github.repository_owner}}
            -Dsonar.projectVersion=${{github.sha}}
      - name: Sonarcloud check PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: '!inputs.skip-sonar && github.event_name != ''push'''
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: |-
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.projectKey=${{github.repository_owner}}_${{github.event.repository.name}}
            -Dsonar.organization=${{github.repository_owner}}
  integration_tests:
    name: Integration tests
    if: '!inputs.skip-integration-tests && needs.pre-job.outputs.should_skip != ''true'''
    runs-on: ubuntu-${{ inputs.ubuntu-version }}
    needs:
      - pre-job
    timeout-minutes: 15
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.with-submodules }}
          fetch-depth: 0
      - name: Download artifact
        if: inputs.project-artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.project-artifact }}
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Authenticate to Google Cloud
        id: auth_gcp
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.gcp-gcr-service-account }}
          workload_identity_provider: ${{ secrets.gcp-gcr-workload-identity-provider }}
          token_format: access_token
      - name: Authenticate to Google Container Registry
        id: auth_gcr
        uses: docker/login-action@v3
        with:
          registry: eu.gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth_gcp.outputs.access_token }}
      - name: Authenticate to Google Artifact Registry
        id: auth_docker_pkg_dev
        uses: docker/login-action@v3
        with:
          registry: europe-west3-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth_gcp.outputs.access_token }}
      - name: Update docker-compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: v2.10.2
      - name: Build
        env:
          DOCKER_BUILDKIT: "1"
        run: docker-compose build
      - name: Integration tests
        run: docker-compose up -d
      - name: Stop
        if: always()
        run: docker-compose stop
      - name: Print logs
        if: always()
        run: docker-compose logs
  mypy:
    name: Mypy
    if: '!inputs.skip-mypy'
    needs:
      - deps
    runs-on: ubuntu-${{ inputs.ubuntu-version }}
    timeout-minutes: 15
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.with-submodules }}
      - name: Download artifact
        if: inputs.project-artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.project-artifact }}
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v3
        with:
          path: .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Configure setup tools for poetry
        if: inputs.setuptools-version
        env:
          SETUPTOOLS_VERSION: ${{ inputs.setuptools-version }}
        run: poetry run pip install "setuptools==$SETUPTOOLS_VERSION"
      - name: Download poetry packages
        run: |-
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          poetry install
      - name: Mypy
        run: poetry run mypy .
  diff_poetry:
    name: Diff Poetry lockfile
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-${{ inputs.ubuntu-version }}
    timeout-minutes: 15
    permissions:
      pull-requests: write
      contents: read
    steps:
      - name: Diff poetry.lock
        uses: goes-funky/diff-poetry-lock@main
