name: Build Python
on:
  workflow_call:
    inputs:
      python-version:
        type: string
        description: Python version
        default: "3.9"
      poetry-version:
        type: string
        description: Poetry version
        default: "1.1.12"
      skip-lint:
        type: boolean
        description: Whether to skip code linting
        default: false
      skip-format:
        type: boolean
        description: Whether to skip code formatting
        default: false
    secrets:
      ssh-private-key:
        description: SSH private key used to authenticate to GitHub with, in order to fetch private dependencies
        required: true
jobs:
  deps:
    runs-on: ubuntu-latest
    name: Dependencies
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
        if: "!steps.deps-cache.outputs.cache-hit"
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
        if: "!steps.deps-cache.outputs.cache-hit"
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: "${{ secrets.ssh-private-key }}"
        if: "!steps.deps-cache.outputs.cache-hit"
      - name: Download dependencies
        if: "!steps.deps-cache.outputs.cache-hit"
        run: |
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          poetry install
  build:
    needs: [deps]
    runs-on: ubuntu-latest
    name: Build
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Ensure code is formatted
        if: "!inputs.skip-format"
        run: poetry run black --check .
      - name: Lint
        if: "!inputs.skip-lint"
        run: poetry run flake8
      - name: Unit test
        run: poetry run pytest --suppress-no-test-exit-code
      - name: Integration test
        run: poetry run pytest --with-integration --suppress-no-test-exit-code
