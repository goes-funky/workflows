name: Build Python
on:
  workflow_call:
    inputs:
      python-version:
        type: string
        description: Python version
        default: "3.9"
      poetry-version:
        type: string
        description: Poetry version
        default: "1.1.12"
      skip-lint:
        type: boolean
        description: Whether to skip code linting
        default: false
      skip-format:
        type: boolean
        description: Whether to skip code formatting
        default: false
      skip-tests:
        type: boolean
        description: Whether to skip running tests
        default: true
      skip-mypy:
        type: boolean
        description: Whether to skip checking type hints with mypy
        default: true
      skip-json-schema-generate:
        type: boolean
        description: Whether to skip integration json schema generation & upload
        default: true
      skip-checkout:
        type: boolean
        description: Whether to skip checkout
        default: false
    secrets:
      codecov-token:
        description: Token to upload coverage reports to codecov
        required: false
      ssh-private-key:
        description: SSH private key used to authenticate to GitHub with, in order to fetch private dependencies
        required: true
jobs:
  deps:
    runs-on: ubuntu-latest
    name: Dependencies
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
        if: "!steps.deps-cache.outputs.cache-hit"
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: "${{ secrets.ssh-private-key }}"
        if: "!steps.deps-cache.outputs.cache-hit"
      - name: Download dependencies
        if: "!steps.deps-cache.outputs.cache-hit"
        run: |
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          poetry install
  black:
    name: Black
    if: "!inputs.skip-format"
    needs: [deps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Ensure code is formatted
        run: poetry run black --check .
  lint:
    name: Lint
    if: "!inputs.skip-lint"
    needs: [deps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Lint
        run: poetry run flake8
  tests:
    name: Tests
    if: "!inputs.skip-tests"
    needs: [deps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Tests
        run: |
          poetry run coverage run -m pytest
          poetry run coverage xml
      - name: Upload Coverage to Codecov
        env:
          CODECOV_TOKEN: ${{ secrets.codecov-token }}
        if: env.CODECOV_TOKEN != null
        uses: codecov/codecov-action@v2
        with:
          token: "${{ secrets.codecov-token }}"
  mypy:
    name: Mypy
    if: "!inputs.skip-mypy"
    needs: [deps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Mypy
        run: |
          poetry run mypy .
  json-schema-generate:
    name: Json Schema Generate & Upload
    if: "!skip-json-schema-generate"
    environment: 'dev' #TODO needs to set to dev on tag and default otherwise to environment input
    needs: [deps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Generate Integration JSON schema
        run: |
          export KAFKA_SERVERS=
          export KAFKA_SASL_KEY=
          export KAFKA_SASL_SECRET=
          export CONTAINER_MODULE=$(basename -s .git "$(git remote get-url origin | sed 's/-/_/g')" )
          poetry run python -m datos_integrations.commands.generate_schemas --outpath=/tmp/integration-schema/integrations --version=0.0.0
      - name: "Setup GCloud"
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.gcp-project-id }}
          service_account_key: ${{ secrets.gcp-service-account }}
          export_default_credentials: true
      - name: Upload Integration schema to JSON schema folder
        uses: 'google-github-actions/upload-cloud-storage@v0'
        with:
          path: '/tmp/integration-schema/'
          destination: ${{ secrets.JSON_SCHEMA_BUCKET }}
