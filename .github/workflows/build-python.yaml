name: Build Python
on:
  workflow_call:
    inputs:
      python-version:
        type: string
        description: Python version
        default: "3.9"
      poetry-version:
        type: string
        description: Poetry version
        default: "1.1.12"
      setuptools-version:
        # Know issue installing some packages. Resolved past poetry v1.2 which is currently in beta https://github.com/python-poetry/poetry/issues/4511
        type: string
        description: Force poetry setuptools version
        default: "" #use version "57.5.0" to get around the problem listed above
        required: false
      skip-lint:
        type: boolean
        description: Whether to skip code linting with flake8
        default: false
      skip-isort:
        type: boolean
        description: Whether to skip code linting with isort
        default: true
      skip-format:
        type: boolean
        description: Whether to skip code formatting
        default: false
      skip-tests:
        type: boolean
        description: Whether to skip running tests
        default: true
      skip-mypy:
        type: boolean
        description: Whether to skip checking type hints with mypy
        default: true
      skip-checkout:
        type: boolean
        description: Whether to skip checkout
        default: false
    secrets:
      codecov-token:
        description: Token to upload coverage reports to codecov
        required: false
      ssh-private-key:
        description: SSH private key used to authenticate to GitHub with, in order to fetch private dependencies
        required: true
jobs:
  deps:
    runs-on: ubuntu-latest
    name: Dependencies
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: "${{ secrets.ssh-private-key }}"
      - name: Configure setup tools for poetry
        #if: "!steps.deps-cache.outputs.cache-hit  && inputs.setuptools-version"
        if: "inputs.setuptools-version"
        env:
          SETUPTOOLS_VERSION: ${{ inputs.setuptools-version }}
        run: |
          poetry run pip install "setuptools==$SETUPTOOLS_VERSION"
      - name: Download dependencies
        #if: "!steps.deps-cache.outputs.cache-hit"
        run: |
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          poetry install
  black:
    name: Black
    if: "!inputs.skip-format"
    needs: [deps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Ensure code is formatted
        run: poetry run black --check .
  lint:
    name: Lint
    if: "!inputs.skip-lint"
    needs: [deps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Flake8
        run: poetry run flake8
      - name: Isort
        if: "!inputs.skip-isort"
        run: poetry run isort --profile black --check .
  tests:
    name: Tests
    if: "!inputs.skip-tests"
    needs: [deps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Upgrade sqlite3
        run: |
          sudo apt-get update
          sudo apt-get --assume-yes install sqlite3
      - name: Tests
        run: |
          poetry run coverage run -m pytest
          poetry run coverage xml
      - name: Upload Coverage to Codecov
        env:
          CODECOV_TOKEN: ${{ secrets.codecov-token }}
        if: env.CODECOV_TOKEN != null
        uses: codecov/codecov-action@v2
        with:
          token: "${{ secrets.codecov-token }}"
  mypy:
    name: Mypy
    if: "!inputs.skip-mypy"
    needs: [deps]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: "!inputs.skip-checkout"
        uses: actions/checkout@v2
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "${{ inputs.python-version }}"
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: |
            .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: "${{ inputs.poetry-version }}"
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Mypy
        run: |
          poetry run mypy .
