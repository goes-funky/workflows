name: Deploy Integration
"on":
  workflow_call:
    inputs:
      environment:
        type: string
        description: Deployment environment
        required: false
      development-environment:
        type: string
        description: Development environment
        default: dev
        required: false
      production-environment:
        type: string
        description: Production environment
        default: prod
        required: false
      default-repo:
        type: string
        description: Default artifact repository
        default: eu.gcr.io/y42-artifacts-ea47981a
        required: false
      dist-artifact:
        type: string
        description: Dist artifact name
        required: false
      skip-deploy:
        type: boolean
        description: Skip deployment to cluster
        required: false
      skip-build:
        type: boolean
        description: Skip build to cluster
        required: false
      skip-job-template-build:
        type: boolean
        description: Job-template configmap building for deploy of tap containers
        default: false
        required: false
      skip-integration-schema-generate:
        type: boolean
        description: Whether to skip integration json schema generation & upload
        default: false
        required: false
      integration-schema-command:
        type: string
        description: The command to run to generate the integration schema
        default: poetry run python -m datos_integrations.commands.generate_schemas --outpath=./integrations --version=0.0.0
        required: false
      python-version:
        type: string
        description: Python version
        default: "3.9"
        required: false
      poetry-version:
        type: string
        description: Poetry version
        default: 1.1.15
        required: false
      setuptools-version:
        type: string
        description: Force poetry setuptools version
        default: 57.5.0
      skaffold:
        type: string
        description: Skaffold version
        default: 1.39.2
      is-repo-public:
        type: boolean
        description: Whether to skip ssh agent configuration
        default: false
      development-branch:
        type: string
        description: Development branch
        default: ${{ github.event.repository.default_branch }}
        required: false
      skip-checkout:
        type: boolean
        description: Whether to skip checkout
        default: false
      kubeval:
        type: string
        description: Kubeval version
        default: 0.16.1
    secrets:
      json-schema-bucket:
        description: Required for json-schema upload. Name of the bucket to write integration schema to.
        required: false
      gcp-project-id:
        description: GCP Project ID
        required: true
      gcp-service-account:
        description: GCP Service Account Key
        required: true
      gcp-gcr-project-id:
        description: GCP GCR Project ID
        required: true
      gke-cluster:
        description: GKE Cluster Name
        required: true
      ssh-private-key:
        description: SSH private key used to authenticate to GitHub with, in order to fetch private dependencies
        required: false
      gcp-gcr-service-account:
        description: GCP GCR Service Account Key
        required: true
      gke-location:
        description: GKE Cluster Location (ignored in lieu of fully-qualified cluster ID)
        required: false
env:
  SKAFFOLD_PUSH: $${ github.event.ref == format('refs/heads/{0}', inputs.development-branch) || startsWith(github.event.ref, 'refs/tags/v') }
jobs:
  integration-schema-generate-development:
    name: Upload Integration Schema to dev
    needs:
      - deps
      - build
    if: '!inputs.skip-integration-schema-generate && (github.event.ref == format(''refs/heads/{0}'', inputs.development-branch) || startsWith(github.event.ref, ''refs/tags/v''))'
    environment: ${{ inputs.development-environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v3
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v3
        with:
          path: .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Generate Integration JSON schema
        env:
          GENERATE_SCHEMA_COMMAND: ${{ inputs.integration-schema-command }}
          DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
        run: |-
          KAFKA_SERVERS='' export KAFKA_SERVERS
          KAFKA_SASL_KEY=''  export KAFKA_SASL_KEY
          KAFKA_SASL_SECRET='' export KAFKA_SASL_SECRET
          CONTAINER_MODULE=$(basename -s .git "$(git remote get-url origin | sed 's/-/_/g')" ) export CONTAINER_MODULE
          eval "$GENERATE_SCHEMA_COMMAND"
      - name: Authenticate to Google Cloud
        id: auth_gcp
        uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.gcp-project-id }}
          credentials_json: ${{ secrets.gcp-service-account }}
      - name: Upload Integration schema to JSON schema folder
        uses: google-github-actions/upload-cloud-storage@v0.8.0
        with:
          path: integrations
          destination: ${{ secrets.json-schema-bucket }}
          headers: 'cache-control: public, max-age=300'
  integration-schema-generate-production:
    name: Upload Integration Schema to prod
    needs:
      - deps
      - build
      - integration-schema-generate-development
      - deploy-development
    if: '!inputs.skip-integration-schema-generate && startsWith(github.event.ref, ''refs/tags/v'')'
    environment: ${{ inputs.production-environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v3
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v3
        with:
          path: .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Generate Integration JSON schema
        env:
          GENERATE_SCHEMA_COMMAND: ${{ inputs.integration-schema-command }}
          DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
        run: |-
          KAFKA_SERVERS='' export KAFKA_SERVERS
          KAFKA_SASL_KEY=''  export KAFKA_SASL_KEY
          KAFKA_SASL_SECRET='' export KAFKA_SASL_SECRET
          CONTAINER_MODULE=$(basename -s .git "$(git remote get-url origin | sed 's/-/_/g')" ) export CONTAINER_MODULE
          eval "$GENERATE_SCHEMA_COMMAND"
      - name: Authenticate to Google Cloud
        id: auth_gcp
        uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.gcp-project-id }}
          credentials_json: ${{ secrets.gcp-service-account }}
      - name: Upload Integration schema to JSON schema folder
        uses: google-github-actions/upload-cloud-storage@v0.8.0
        with:
          path: integrations
          destination: ${{ secrets.json-schema-bucket }}
          headers: 'cache-control: public, max-age=300'
  deploy-development:
    name: Deploy to development
    needs:
      - build
    if: '!inputs.skip-deploy && (github.event.ref == format(''refs/heads/{0}'', inputs.development-branch) || startsWith(github.event.ref, ''refs/tags/v''))'
    environment: ${{ inputs.development-environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v3
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Authenticate to Google Cloud
        id: auth_gcp
        uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.gcp-project-id }}
          credentials_json: ${{ secrets.gcp-service-account }}
      - uses: google-github-actions/get-gke-credentials@v0.8.0
        with:
          cluster_name: ${{ secrets.gke-cluster }}
      - name: Download build reference
        uses: actions/download-artifact@v3
        with:
          name: build-ref
      - name: Setup Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          setup-tools: skaffold
          skaffold: ${{ inputs.skaffold }}
      - name: Deploy
        if: inputs.skip-job-template-build
        run: skaffold deploy --force --build-artifacts=build.json
      - name: Deploy tap container with job-template
        if: '!inputs.skip-job-template-build'
        run: |-
          skaffold render --offline=true --build-artifacts=build.json > rendered.yaml
          yq -i eval-all 'select(.kind == "ConfigMap" and .metadata.name == "*job-template*").data."job_template.yml" = (select(.kind == "Job" and .metadata.name == "*job-template")| to_yaml()) | select(.metadata.labels.type != "*job-template")' rendered.yaml
          COMMIT_SHA="$(git rev-parse --short HEAD)" export COMMIT_SHA
          yq -i eval-all 'select(.kind == "Job" and .metadata.name == "*deploy-notice").metadata.name = (select(.kind == "Job" and .metadata.name == "*deploy-notice").metadata.name + "-" + strenv(COMMIT_SHA))' rendered.yaml
          skaffold apply --force=true rendered.yaml
  deploy-production:
    name: Deploy to production
    needs:
      - build
      - deploy-development
    if: '!inputs.skip-deploy && startsWith(github.event.ref, ''refs/tags/v'')'
    environment: ${{ inputs.production-environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v3
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Authenticate to Google Cloud
        id: auth_gcp
        uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.gcp-project-id }}
          credentials_json: ${{ secrets.gcp-service-account }}
      - uses: google-github-actions/get-gke-credentials@v0.8.0
        with:
          cluster_name: ${{ secrets.gke-cluster }}
      - name: Download build reference
        uses: actions/download-artifact@v3
        with:
          name: build-ref
      - name: Setup Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          setup-tools: skaffold
          skaffold: ${{ inputs.skaffold }}
      - name: Deploy
        if: inputs.skip-job-template-build
        run: skaffold deploy --force --build-artifacts=build.json
      - name: Deploy tap container with job-template
        if: '!inputs.skip-job-template-build'
        run: |-
          skaffold render --offline=true --build-artifacts=build.json > rendered.yaml
          yq -i eval-all 'select(.kind == "ConfigMap" and .metadata.name == "*job-template*").data."job_template.yml" = (select(.kind == "Job" and .metadata.name == "*job-template")| to_yaml()) | select(.metadata.labels.type != "*job-template")' rendered.yaml
          COMMIT_SHA="$(git rev-parse --short HEAD)" export COMMIT_SHA
          yq -i eval-all 'select(.kind == "Job" and .metadata.name == "*deploy-notice").metadata.name = (select(.kind == "Job" and .metadata.name == "*deploy-notice").metadata.name + "-" + strenv(COMMIT_SHA))' rendered.yaml
          skaffold apply --force=true rendered.yaml
  deps:
    runs-on: ubuntu-latest
    name: Dependencies
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v3
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v3
        with:
          path: .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Configure setup tools for poetry
        if: inputs.setuptools-version
        env:
          SETUPTOOLS_VERSION: ${{ inputs.setuptools-version }}
        run: poetry run pip install "setuptools==$SETUPTOOLS_VERSION"
      - name: Download dependencies
        run: |-
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          poetry install
  integration-schema-generate-environment:
    name: Upload Integration Schema to env
    needs:
      - deps
      - build
    if: inputs.environment
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v3
      - name: Setup python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
      - name: Setup cache
        id: deps-cache
        uses: actions/cache@v3
        with:
          path: .venv/
          key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Generate Integration JSON schema
        env:
          GENERATE_SCHEMA_COMMAND: ${{ inputs.integration-schema-command }}
          DEPLOY_ENVIRONMENT: ${{ inputs.environment }}
        run: |-
          KAFKA_SERVERS='' export KAFKA_SERVERS
          KAFKA_SASL_KEY=''  export KAFKA_SASL_KEY
          KAFKA_SASL_SECRET='' export KAFKA_SASL_SECRET
          CONTAINER_MODULE=$(basename -s .git "$(git remote get-url origin | sed 's/-/_/g')" ) export CONTAINER_MODULE
          eval "$GENERATE_SCHEMA_COMMAND"
      - name: Authenticate to Google Cloud
        id: auth_gcp
        uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.gcp-project-id }}
          credentials_json: ${{ secrets.gcp-service-account }}
      - name: Upload Integration schema to JSON schema folder
        uses: google-github-actions/upload-cloud-storage@v0.8.0
        with:
          path: integrations
          destination: ${{ secrets.json-schema-bucket }}
          headers: 'cache-control: public, max-age=300'
  build:
    runs-on: ubuntu-latest
    name: Build Docker images
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v3
        with:
          path: ./code
      - name: Setup skaffold cache
        uses: actions/cache@v3
        with:
          path: ~/.skaffold/cache
          key: ${{ runner.os }}-skaffold
      - name: Download artifact
        uses: actions/download-artifact@v3
        if: inputs.dist-artifact
        with:
          name: ${{ inputs.dist-artifact }}
          path: ./code/dist
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Authenticate to Google Cloud
        id: auth_gcp
        uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.gcp-gcr-project-id }}
          credentials_json: ${{ secrets.gcp-gcr-service-account }}
          token_format: access_token
      - name: Authenticate to Google Container Registry
        id: auth_gcr
        uses: docker/login-action@v2
        with:
          registry: eu.gcr.io
          username: oauth2accesstoken
          password: ${{ steps.auth_gcp.outputs.access_token }}
      - name: Authenticate to Google Artifact Registry
        id: auth_docker_pkg_dev
        uses: docker/login-action@v2
        with:
          registry: europe-west3-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth_gcp.outputs.access_token }}
      - name: Setup Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          setup-tools: |-
            skaffold
            kubeval
          skaffold: ${{ inputs.skaffold }}
          kubeval: ${{ inputs.kubeval }}
      - name: Export git build details
        env:
          REPO: ${{ inputs.default-repo }}
        run: |-
          CONTAINER_NAME=$(basename -s .git "$(git remote get-url origin)") && echo "CONTAINER_NAME=$CONTAINER_NAME" >> "$GITHUB_ENV"
          SHORT_SHA="$(git rev-parse --short HEAD)" && echo "SHORT_SHA=$SHORT_SHA" >> "$GITHUB_ENV"
          COMMIT_SHA="$(git rev-parse HEAD)" && echo "COMMIT_SHA=$COMMIT_SHA" >> "$GITHUB_ENV"
          IMAGE_NAME="$REPO/$CONTAINER_NAME:$SHORT_SHA" && echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"
      - name: Configure Skaffold
        run: skaffold config set default-repo '${{ inputs.default-repo }}'
      - name: Build
        if: '!inputs.skip-build'
        env:
          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
          SHORT_SHA: ${{ env.SHORT_SHA }}
          COMMIT_SHA: ${{ env.COMMIT_SHA }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: cd ./code && skaffold build --file-output=build.json
      - name: Archive build reference
        if: '!inputs.skip-build'
        uses: actions/upload-artifact@v3
        with:
          name: build-ref
          path: ./code/build.json
  deploy-environment:
    name: Deploy to environment
    needs:
      - build
    if: inputs.environment
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: '!inputs.skip-checkout'
        uses: actions/checkout@v3
      - name: Setup SSH Agent
        if: '!inputs.is-repo-public'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.ssh-private-key }}
      - name: Authenticate to Google Cloud
        id: auth_gcp
        uses: google-github-actions/auth@v0
        with:
          project_id: ${{ secrets.gcp-project-id }}
          credentials_json: ${{ secrets.gcp-service-account }}
      - uses: google-github-actions/get-gke-credentials@v0.8.0
        with:
          cluster_name: ${{ secrets.gke-cluster }}
      - name: Download build reference
        uses: actions/download-artifact@v3
        with:
          name: build-ref
      - name: Setup Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          setup-tools: skaffold
          skaffold: ${{ inputs.skaffold }}
      - name: Deploy
        if: inputs.skip-job-template-build
        run: skaffold deploy --force --build-artifacts=build.json
      - name: Deploy tap container with job-template
        if: '!inputs.skip-job-template-build'
        run: |-
          skaffold render --offline=true --build-artifacts=build.json > rendered.yaml
          yq -i eval-all 'select(.kind == "ConfigMap" and .metadata.name == "*job-template*").data."job_template.yml" = (select(.kind == "Job" and .metadata.name == "*job-template")| to_yaml()) | select(.metadata.labels.type != "*job-template")' rendered.yaml
          COMMIT_SHA="$(git rev-parse --short HEAD)" export COMMIT_SHA
          yq -i eval-all 'select(.kind == "Job" and .metadata.name == "*deploy-notice").metadata.name = (select(.kind == "Job" and .metadata.name == "*deploy-notice").metadata.name + "-" + strenv(COMMIT_SHA))' rendered.yaml
          skaffold apply --force=true rendered.yaml
