fragments:
  step-setup-ssh-agent: &step-setup-ssh-agent
  step-setup-gcloud: &step-setup-gcloud
    name: "Setup GCloud"
    uses: google-github-actions/setup-gcloud@v0.2.1
  job-deploy: &job-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - <<: *step-setup-gcloud
        with:
          project_id: ${{ secrets.gcp-project-id }}
          service_account_key: ${{ secrets.gcp-service-account }}
          export_default_credentials: true
      - uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: ${{ secrets.gke-cluster }}
          location: ${{ secrets.gke-location }}
      - name: Download build reference
        uses: actions/download-artifact@v2
        with:
          name: build-ref
      - uses: yokawasa/action-setup-kube-tools@v0.7.1
        with:
          setup-tools: skaffold
          skaffold: "${{ inputs.skaffold }}"
      - name: Deploy
        run: |
          skaffold deploy --force --build-artifacts=build.json
on:
  workflow_call:
    inputs:
      skaffold:
        type: string
        description: "Skaffold version"
        default: "1.33.0"
      kubeval:
        type: string
        description: "Kubeval version"
        default: "0.16.1"
      environment:
        type: string
        description: "Deployment environment"
        required: false
      default-repo:
        type: string
        description: "Default artifact repository"
        default: "eu.gcr.io/datos-tech"
      dist-artifact:
        type: string
        description: "Dist artifact name"
        required: false
      skip-deploy:
        type: boolean
        description: "Skip deployment to cluster"
        required: false
    secrets:
      gcp-project-id:
        description: "GCP Project ID"
        required: true
      gcp-service-account:
        description: "GCP Service Account Key"
        required: true
      gke-cluster:
        description: "GKE Cluster Name"
        required: true
      gke-location:
        description: "GKE Cluster Location"
        required: true
      gcp-gcr-project-id:
        description: "GCP GCR Project ID"
        required: true
      gcp-gcr-service-account:
        description: "GCP GCR Service Account Key"
        required: true
jobs:
  build:
    name: Build Docker images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup skaffold cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.skaffold/cache
          key: "${{ runner.os }}-skaffold"
      - uses: actions/download-artifact@master
        if: "inputs.dist-artifact"
        with:
          name: ${{ inputs.dist-artifact }}
          path: dist
      - <<: *step-setup-ssh-agent
      - <<: *step-setup-gcloud
        with:
          project_id: ${{ secrets.gcp-gcr-project-id }}
          service_account_key: ${{ secrets.gcp-gcr-service-account }}
          export_default_credentials: true
      - name: Configure Docker Auth
        run: |
          gcloud --quiet auth configure-docker eu.gcr.io
      - name: Setup Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.7.1
        with:
          setup-tools: |
            skaffold
            kubeval
          skaffold: "${{ inputs.skaffold }}"
          kubeval: "${{ inputs.kubeval }}"
      - name: Configure Skaffold
        run: |
          skaffold config set default-repo "${{ inputs.default-repo }}"
      - name: Build
        run: |
          skaffold build --file-output=build.json
      - id: verify
        name: Render and verify deployments
        run: |
          skaffold render --offline=true --build-artifacts=build.json | kubeval | tee kubeval.txt
          kubeval=$(printf '%s' "$(cat kubeval.txt)" | jq --raw-input --slurp '.')
          echo "::set-output name=kubeval::$kubeval"
      - name: Publish kubeval result
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          hide_and_recreate: true
          header: "kubeval"
          message: |
            ### Kubeval
            ```
            ${{ fromJSON(steps.verify.outputs.kubeval) }}
            ```
      - name: Archive build reference
        uses: actions/upload-artifact@v2
        with:
          name: build-ref
          path: build.json
  # deploy to specified environment
  deploy-environment:
    name: Deploy to environment
    needs: [build]
    if: "inputs.environment"
    environment: ${{ inputs.environment }}
    <<: *job-deploy
  deploy-development:
    name: Deploy to development
    needs: [build]
    environment: development
    <<: *job-deploy
  deploy-production:
    name: Deploy to production
    needs: [build, deploy-development]
    environment: production
    <<: *job-deploy
