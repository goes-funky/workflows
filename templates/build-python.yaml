# Dependencies: templates/common/build.yaml templates/common/ssh-agent.yaml
name: Build Python
fragments:
  step-setup-ssh-agent: &step-setup-ssh-agent
  step-checkout: &step-checkout
  step-setup-python: &step-setup-python
    name: Setup python
    id: setup-python
    uses: actions/setup-python@v2
    with:
      python-version: "${{ inputs.python-version }}"
  step-setup-poetry: &step-setup-poetry
    name: Install and configure Poetry
    uses: snok/install-poetry@v1
    with:
      version: "${{ inputs.poetry-version }}"
      virtualenvs-create: true
      virtualenvs-in-project: true
  step-setup-deps-cache: &step-setup-deps-cache
    name: Setup cache
    id: deps-cache
    uses: actions/cache@v2
    with:
      path: |
        .venv/
      key: ${{ runner.os }}-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
  runner-config: &runner-config
    needs: [ deps ]
    runs-on: ubuntu-latest

on:
  workflow_call:
    inputs:
      python-version:
        type: string
        description: Python version
        default: "3.9"
      poetry-version:
        type: string
        description: Poetry version
        default: "1.1.12"
      setuptools-version:
      # Know issue installing some packages. Resolved past poetry v1.2 which is currently in beta https://github.com/python-poetry/poetry/issues/4511
        type: string
        description: Force poetry setuptools version
        default: "57.5.0"
      skip-lint:
        type: boolean
        description: Whether to skip code linting
        default: false
      skip-format:
        type: boolean
        description: Whether to skip code formatting
        default: false
      skip-tests:
        type: boolean
        description: Whether to skip running tests
        default: true
      skip-mypy:
        type: boolean
        description: Whether to skip checking type hints with mypy
        default: true
      skip-json-schema-generate:
        type: boolean
        description: Whether to skip integration json schema generation & upload
        default: true
    secrets:
      codecov-token:
        description: Token to upload coverage reports to codecov
        required: false
      json-schema-bucket:
        description: Required for json-schema upload. Name of the bucket to write integration schema to.
        required: false
      gcp-project-id:
        description: Required for json-schema upload. The project where the json-schema bucket resides.
        required: false
      gcp-service-account:
        description: Required for json-schema upload. The GCP creds/service account to upload into the bucket.
        required: false
jobs:
  deps:
    runs-on: ubuntu-latest
    name: Dependencies
    steps:
      - <<: *step-checkout
      - <<: *step-setup-python
      - <<: *step-setup-deps-cache
      - <<: *step-setup-poetry
        if: "!steps.deps-cache.outputs.cache-hit"
      - <<: *step-setup-ssh-agent
        if: "!steps.deps-cache.outputs.cache-hit"
      - name: Configure setup tools for poetry
        if: "!steps.deps-cache.outputs.cache-hit  && inputs.setuptools-version"
        env:
          SETUPTOOLS_VERSION: ${{ inputs.setuptools-version }}
        run: |
          poetry run pip install "setuptools==$SETUPTOOLS_VERSION"
      - name: Download dependencies
        if: "!steps.deps-cache.outputs.cache-hit"
        run: |
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          poetry install

  black:
    name: Black
    if: "!inputs.skip-format"
    <<: *runner-config
    steps:
      - <<: *step-checkout
      - <<: *step-setup-python
      - <<: *step-setup-deps-cache
      - <<: *step-setup-poetry
      - name: Ensure code is formatted
        run: poetry run black --check .

  lint:
    name: Lint
    if: "!inputs.skip-lint"
    <<: *runner-config
    steps:
      - <<: *step-checkout
      - <<: *step-setup-python
      - <<: *step-setup-deps-cache
      - <<: *step-setup-poetry
      - name: Lint
        run: poetry run flake8

  tests:
    name: Tests
    if: "!inputs.skip-tests"
    <<: *runner-config
    steps:
      - <<: *step-checkout
      - <<: *step-setup-python
      - <<: *step-setup-deps-cache
      - <<: *step-setup-poetry
      - name: Tests
        run: |
          poetry run coverage run -m pytest
          poetry run coverage xml
      - name: Upload Coverage to Codecov
        env:
          CODECOV_TOKEN: ${{ secrets.codecov-token }}
        if: env.CODECOV_TOKEN != null
        uses: codecov/codecov-action@v2
        with:
          token: "${{ secrets.codecov-token }}"

  mypy:
    name: Mypy
    if: "!inputs.skip-mypy"
    <<: *runner-config
    steps:
      - <<: *step-checkout
      - <<: *step-setup-python
      - <<: *step-setup-deps-cache
      - <<: *step-setup-poetry
      - name: Mypy
        run: |
          poetry run mypy .

  json-schema-generate:
    name: Json Schema Generate & Upload
    if: "!inputs.skip-json-schema-generate"
    environment: 'dev' #TODO needs to set to prod on tag and default otherwise to environment dev or input
    <<: *runner-config
    steps:
      - <<: *step-checkout
      - <<: *step-setup-python
      - <<: *step-setup-deps-cache
      - <<: *step-setup-poetry
      - name: Generate Integration JSON schema
        run: |
          export KAFKA_SERVERS=
          export KAFKA_SASL_KEY=
          export KAFKA_SASL_SECRET=
          export CONTAINER_MODULE=$(basename -s .git "$(git remote get-url origin | sed 's/-/_/g')" )
          poetry run python -m datos_integrations.commands.generate_schemas --outpath=./integrations --version=0.0.0
      - name: "Setup GCloud"
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.gcp-project-id }}
          service_account_key: ${{ secrets.gcp-service-account }}
          export_default_credentials: true
      - name: Upload Integration schema to JSON schema folder
        uses: 'google-github-actions/upload-cloud-storage@v0.8.0' #pinning version till resolved https://github.com/google-github-actions/upload-cloud-storage/issues/248
        with:
          path: 'integrations'
          destination: ${{ secrets.json-schema-bucket }}
